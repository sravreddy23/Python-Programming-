'''Project 7 
Write a definition for a class named Circle with attributes center and radius, where center is a Point object and radius is a number. Instantiate a Circle object that represents a
circle with its center at (150, 100) and radius 75. Write a function named point_in_circle that takes a Circle and a Point and returns True if the Point lies in or on the boundary 
of the circle. Write a function named rect_in_circle that takes a Circle and a Rectangle and returns True if the Rectangle lies entirely in or on the boundary of the circle. Write 
a function named rect_circle_overlap that takes a Circle and a Rectangle and returns True if any of the corners of the Rectangle fall inside the Circle. Or as a more challenging 
version, return True if any part of the Rectangle falls inside the Circle.
'''
print("NAME: KATIKAM SRAVAN KUMAR REDDY")
print("USN:1AY24AI054")
print("SECTION:M")
import math

class Point:
    def __init__(self, x, y): self.x, self.y = x, y

class Circle:
    def __init__(self, center, radius): self.center, self.radius = center, radius

class Rectangle:
    def __init__(self, corner, width, height): self.corner, self.width, self.height = corner, width, height

def point_in_circle(circle, point):
    dx = point.x - circle.center.x
    dy = point.y - circle.center.y
    return math.hypot(dx, dy) <= circle.radius

def rect_in_circle(circle, rect):
    return all(point_in_circle(circle, Point(rect.corner.x + dx, rect.corner.y + dy))
               for dx in (0, rect.width) for dy in (0, rect.height))

def rect_circle_overlap(circle, rect):
    return any(point_in_circle(circle, Point(rect.corner.x + dx, rect.corner.y + dy))
               for dx in (0, rect.width) for dy in (0, rect.height))

# Test
c = Circle(Point(150, 100), 75)
r = Rectangle(Point(100, 50), 100, 50)
print(point_in_circle(c, Point(150, 100)))     
print(point_in_circle(c, Point(230, 100)))     
print(rect_in_circle(c, r))                    
print(rect_circle_overlap(c, r))               
